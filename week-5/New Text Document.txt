Explain the difference between synchronous and asynchronous code =>

Synchronous Code:
1- الكود بيتنفذ سطر ورا سطر
2- لو في سطر بياخد وقت البرنامج هيستنى لحد ما يخلص قبل ما يكمل

Asynchronous Code :
1- الكود اللي بياخد وقت بيشتغل في الخلفية
2- البرنامج ما بيستناش بيكمّل باقي الكود
3- لما المهمة تخلص بتنفذ Callback أو Promise أو Async/Await.

--------------------------------------------------------------------------------------------------------------------------------------------------

Compare fetch vs XMLHttpRequest with Numbers  =>

fetch => 
fetch("http://numbersapi.com/42")
  .then(response => response.text())
  .then(data => console.log("Fetch Response:", data))
  .catch(error => console.error(error));

1- أسهل وبيدعم Promises	
2- تلقائي مع response.json()	
3- حديث وبيشتغل في معظم المتصفحات


XMLHttpRequest => 
const xhr = new XMLHttpRequest();
xhr.open("GET", "http://numbersapi.com/42");
xhr.onload = function() {
    if (xhr.status === 200) {
        console.log("XHR Response:", xhr.responseText);
    }
};
xhr.onerror = function() {
    console.error("Request Failed");
};
xhr.send();

1- أعقد ولازم Callbacks
2- لازم نعمل JSON.parse()
3- قديم لكن مدعوم في كل المتصفحات


--------------------------------------------------------------------------------------------------------------------------------------------------

function replaceOddNumbers(str) {
    return str.replace(/\b\d+\b/g, (match) => {
        return parseInt(match) % 2 !== 0 ? "BEEP" : match;
    });
}

const input = "I have 12 cars, 11 of which are 89 years old";
console.log(replaceOddNumbers(input));

--------------------------------------------------------------------------------------------------------------------------------------------------

async function getPlanetName() {
    const personResponse = await fetch("https://swapi.dev/api/people/4/");
    const personData = await personResponse.json();
    
    const planetResponse = await fetch(personData.homeworld);
    const planetData = await planetResponse.json();
    
    console.log("Planet Name:", planetData.name);
}

getPlanetName();

--------------------------------------------------------------------------------------------------------------------------------------------------

async function calculateTotal() {
    const cart = [
        { id: 1, qty: 3 },
        { id: 4, qty: 4 },
        { id: 3, qty: 5 }
    ];

    let total = 0;

    for (const item of cart) {
        const response = await fetch(`https://fakestoreapi.com/products/${item.id}`);
        const product = await response.json();
        total += product.price * item.qty;
    }

    console.log("Total Price:", total.toFixed(2));
}

calculateTotal();

--------------------------------------------------------------------------------------------------------------------------------------------------

function wait(ms, msg) {
    return new Promise(resolve => setTimeout(() => {
        console.log(msg);
        resolve();
    }, ms));
}

wait(5000, "Hey there!")
    .then(() => wait(3000, "This code will help you understand"))
    .then(() => wait(2000, "Asynchronous Programming"))
    .then(() => wait(3000, "What The Callback Hell!!!"))
    .then(() => wait(1000, "I AM STUCK"));


async function run() {
    await wait(5000, "Hey there!");
    await wait(3000, "This code will help you understand");
    await wait(2000, "Asynchronous Programming");
    await wait(3000, "What The Callback Hell!!!");
    await wait(1000, "I AM STUCK");
}

run();

--------------------------------------------------------------------------------------------------------------------------------------------------

class Instructor {
    constructor(name) {
        if (Instructor.instance) {
            return Instructor.instance;
        }
        this.name = name;
        Instructor.instance = this;
    }
}

class Student {
    constructor(name, instructor = null) {
        this.name = name;
        this.instructor = instructor;
    }
}

const instructor1 = new Instructor("Mr. Ali");
const instructor2 = new Instructor("Ms. Mona");

console.log(instructor1 === instructor2);

const student1 = new Student("Ahmed", instructor1);
const student2 = new Student("Sara", instructor1);
console.log(student1, student2);

--------------------------------------------------------------------------------------------------------------------------------------------------

class Car {
    drive() { console.log("Driving a car"); }
}

class Bike {
    drive() { console.log("Riding a bike"); }
}

class VehicleFactory {
    static createVehicle(type) {
        if (type === "car") return new Car();
        if (type === "bike") return new Bike();
    }
}

const myCar = VehicleFactory.createVehicle("car");
myCar.drive(); // Driving a car

const myBike = VehicleFactory.createVehicle("bike");
myBike.drive(); // Riding a bike

--------------------------------------------------------------------------------------------------------------------------------------------------











